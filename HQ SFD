#include <cv.h>
#include <highgui.h>
#include <math.h>

http://opencvexamples.blogspot.com/2013/10/2d-convolution-creating-new-filter.html
void bins(IplImage* _image)
{
        assert(_image!=0);

        IplImage* bin = cvCreateImage( cvGetSize(_image), IPL_DEPTH_8U, 1);
        cvConvertImage(_image, bin, CV_BGR2GRAY);
        cvCanny(bin, bin, 50, 200);
        cvNamedWindow( "bin", CV_WINDOW_NORMAL );
        cvShowImage("bin", bin);

        // хранилище памяти для контуров
        CvMemStorage* storage = cvCreateMemStorage(0);
        CvSeq* contours=0;

        // находим контуры
        int contoursCont = cvFindContours( bin, storage,&contours,sizeof(CvContour),CV_RETR_LIST,CV_CHAIN_APPROX_SIMPLE,cvPoint(0,0));

       // assert(contours!=0);

        // обходим все контуры
        ///for( CvSeq* current = contours; current != NULL; current = current->h_next ){
                // вычисляем площадь и периметр контура
            //    double area = fabs(cvContourArea(current));
            //    double perim = cvContourPerimeter(current);

                // 1/4*CV_PI = 0,079577
                //if ( area / (perim * perim) > 0.065 && area / (perim * perim)< 0.1 ){ // в 10% интервале
                        // нарисуем контур
                      //  cvDrawContours(_image, current, cvScalar(0, 0, 255), cvScalar(0, 255, 0), -1, 20, 20);
						//countr++;
               // }
       // }

        // освобождаем ресурсы
        cvReleaseMemStorage(&storage);
        cvReleaseImage(&bin);
}






int main(int argc, char* argv[]) 
{
	
		IplImage  *dst=0;
        IplImage* image = 0;
        char* filename = argc >= 2 ? argv[1] : "e2.jpg";
        image = cvLoadImage(filename, CV_LOAD_IMAGE_GRAYSCALE);
        printf("[i] image: %s\n", filename);
        assert( image != 0 );
        IplImage* src = cvLoadImage(filename); 

		float  kernel[9];

	    kernel[0]=-0.1;
        kernel[1]=0.2;
        kernel[2]=-0.1;

        kernel[3]=0.2;
        kernel[4] = 1.27;
        kernel[5]=0.2;

        kernel[6]=-0.1;
        kernel[7]=0.2;
        kernel[8]=-0.1;
		float kernel4[9];
		int cs = 0;
		//свертка 
		 CvMat kernel_matrix=cvMat(3,3,CV_32FC1,kernel);

        // накладываем фильтр
        cvFilter2D(src, src, &kernel_matrix, cvPoint(-1,-1));
		cvSmooth(src, src, CV_GAUSSIAN, 5, 5 );
		cvSmooth(src,src,CV_MEDIAN,5,5);
		cvSmooth(src, src, CV_GAUSSIAN, 5, 5 );
		cvSmooth(src, src, CV_GAUSSIAN, 5, 5 );
		//cvSmooth(src,src,CV_MEDIAN,5,5);
        IplImage* imgGrayScale = cvCreateImage(cvGetSize(src), 8, 1); 
		 cvCvtColor(src,imgGrayScale,CV_BGR2GRAY);
	  //thresholding the grayscale image to get better results
	 cvThreshold(imgGrayScale,imgGrayScale,128,255,CV_THRESH_BINARY);  
	 CvSeq* contours;  //hold the pointer to a contour in the memory block
	 CvSeq* result;   //hold sequence of points of a contour
	 CvMemStorage *storage = cvCreateMemStorage(0); //storage area for all contours
	 cvFindContours(imgGrayScale, storage, &contours, sizeof(CvContour), CV_RETR_LIST, CV_CHAIN_APPROX_SIMPLE, cvPoint(0,0));
	bins(src);
	 
		




	 while(contours)
	 {
		 //obtain a sequence of points of contour, pointed by the variable 'contour'
		 result = cvApproxPoly(contours, sizeof(CvContour), storage, CV_POLY_APPROX_DP, cvContourPerimeter(contours)*0.02, 0);
           
		 //if there are 3  vertices  in the contour(It should be a triangle)
		if(result->total==3 )
		 {
			 //iterating through each point
			 CvPoint *pt[3];
			 for(int i=0;i<3;i++){
				 pt[i] = (CvPoint*)cvGetSeqElem(result, i);
			 }
   
			 //drawing lines around the triangle
			 cvLine(src, *pt[0], *pt[1], cvScalar(255,0,0),4);
			 cvLine(src, *pt[1], *pt[2], cvScalar(255,0,0),4);
			 cvLine(src, *pt[2], *pt[0], cvScalar(255,0,0),4);
			//counttr++;
		 }

		  //if there are 4 vertices in the contour(It should be a quadrilateral)
		 else if(result->total==4 )
		 {
			 //iterating through each point
			 CvPoint *pt[4];
			 for(int i=0;i<4;i++){
				 pt[i] = (CvPoint*)cvGetSeqElem(result, i);
			 }
   
			 //drawing lines around the quadrilateral
			 cvLine(src, *pt[0], *pt[1], cvScalar(0,0,250),4);
			 cvLine(src, *pt[1], *pt[2], cvScalar(0,0,250),4);
			 cvLine(src, *pt[2], *pt[3], cvScalar(0,0,250),4);
			 cvLine(src, *pt[3], *pt[0], cvScalar(0,0,250),4);  
			 //counts++;
			

		 }

	   //if there are 7  vertices  in the contour(It should be a heptagon)
		/* else if(result->total ==7  )
		 {
			 //iterating through each point
			 CvPoint *pt[7];
			 for(int i=0;i<7;i++){
				 pt[i] = (CvPoint*)cvGetSeqElem(result, i);
			 }
   
			 //drawing lines around the heptagon
			 cvLine(src, *pt[0], *pt[1], cvScalar(0,0,255),4);
			 cvLine(src, *pt[1], *pt[2], cvScalar(0,0,255),4);
			 cvLine(src, *pt[2], *pt[3], cvScalar(0,0,255),4);
			 cvLine(src, *pt[3], *pt[4], cvScalar(0,0,255),4);
			 cvLine(src, *pt[4], *pt[5], cvScalar(0,0,255),4);
			 cvLine(src, *pt[5], *pt[6], cvScalar(0,0,255),4);
			 cvLine(src, *pt[6], *pt[0], cvScalar(0,0,255),4);
		 }*/
		 
		  //obtain the next contour
		 contours = contours->h_next; 
	 }


        cvSmooth(image, image, CV_GAUSSIAN, 5, 5 );
        CvSeq* results = cvHoughCircles( 
                image, 
                storage, 
                CV_HOUGH_GRADIENT, 
                1.5,
                image->width/4
                ); 
        for( int i = 0; i < results->total; i++ ) {
                float* p = (float*) cvGetSeqElem( results, i );
                CvPoint pt = cvPoint( cvRound( p[0] ), cvRound( p[1] ) );
                cvCircle( src, pt, cvRound( p[2] ), CV_RGB(0,1000,1000),5,120,0 );
        }
		
        cvNamedWindow( "cvHoughCircles", CV_WINDOW_NORMAL );
        cvShowImage( "cvHoughCircles", src);





        cvWaitKey(0);
        cvReleaseMemStorage(&storage);
        cvReleaseImage(& image);
        cvReleaseImage(&src);
        cvDestroyAllWindows();
        return 0;
}
